/** [!] http://www.mymathlib.com/functions/riemann_zeta.html#riemann_zeta */

import { bernoulliNumber } from "./bernoulli";
import { dirichletEta, dirichletEtaStar } from "./dirichlet-eta";

/** Common notation for the Dirichlet Eta function */
export const SYMBOL = "Î¶";

//#region .data
const CUTOFF = 66;
const zetaStarK = [
  6.449340668482264364724e-1, 2.020569031595942853997e-1,
  8.232323371113819151600e-2, 3.692775514336992633137e-2,
  1.734306198444913971452e-2, 8.349277381922826839798e-3,
  4.077356197944339378685e-3, 2.008392826082214417853e-3,
  9.945751278180853371461e-4, 4.941886041194645587042e-4,
  2.460865533080482986443e-4, 1.227133475784891467815e-4,
  6.124813505870482926574e-5, 3.058823630702049355340e-5,
  1.528225940865187173295e-5, 7.637197637899762273681e-6,
  3.817293264999839856479e-6, 1.908212716553938925660e-6,
  9.539620338727961131527e-7, 4.769329867878064631168e-7,
  2.384505027277329900037e-7, 1.192199259653110730678e-7,
  5.960818905125947961244e-8, 2.980350351465228018606e-8,
  1.490155482836504123466e-8, 7.450711789835429491981e-9,
  3.725334024788457054819e-9, 1.862659723513049006404e-9,
  9.313274324196681828718e-10, 4.656629065033784072989e-10,
  2.328311833676505492001e-10, 1.164155017270051977593e-10,
  5.820772087902700889244e-11, 2.910385044497099686929e-11,
  1.455192189104198423593e-11, 7.275959835057481014521e-12,
  3.637979547378651190237e-12, 1.818989650307065947585e-12,
  9.094947840263889282533e-13, 4.547473783042154026799e-13,
  2.273736845824652515227e-13, 1.136868407680227849349e-13,
  5.684341987627585609277e-14, 2.842170976889301855455e-14,
  1.421085482803160676983e-14, 7.105427395210852712877e-15,
  3.552713691337113673298e-15, 1.776356843579120327473e-15,
  8.881784210930815903096e-16, 4.440892103143813364198e-16,
  2.220446050798041983999e-16, 1.110223025141066133721e-16,
  5.551115124845481243724e-17, 2.775557562136124172582e-17,
  1.387778780972523276284e-17, 6.938893904544153697446e-18,
  3.469446952165922624744e-18, 1.734723476047576572049e-18,
  8.673617380119933728342e-19, 4.336808690020650487497e-19,
  2.168404344997219785014e-19, 1.084202172494241406301e-19,
  5.421010862456645410919e-20, 2.710505431223468831955e-20,
  1.355252715610116458149e-20, 6.776263578045189097995e-21,
  3.388131789020796818086e-21, 1.694065894509799165406e-21,
  8.470329472546998348247e-22, 4.235164736272833347862e-22,
  2.117582368136194731844e-22, 1.058791184068023385227e-22,
  5.293955920339870323814e-23, 2.646977960169852961134e-23,
  1.323488980084899080309e-23, 6.617444900424404067355e-24,
  3.308722450212171588947e-24, 1.654361225106075646230e-24,
  8.271806125530344403671e-25, 4.135903062765160926009e-25,
  2.067951531382576704396e-25, 1.033975765691287099328e-25,
  5.169878828456431320410e-26, 2.584939414228214268128e-26,
  1.292469707114106670038e-26, 6.462348535570531803438e-27,
  3.231174267785265386135e-27, 1.615587133892632521206e-27,
  8.077935669463162033159e-28, 4.038967834731580825622e-28,
  2.019483917365790349159e-28, 1.009741958682895153362e-28,
  5.048709793414475696085e-29, 2.524354896707237824467e-29,
  1.262177448353618904375e-29, 6.310887241768094495683e-30,
  3.155443620884047239110e-30, 1.577721810442023616644e-30,
  7.888609052210118073521e-31, 3.944304526105059033526e-31,
  1.972152263052529515685e-31, 9.860761315262647574833e-32,
  4.930380657631323786219e-32, 2.465190328815661892710e-32,
  1.232595164407830946222e-32, 6.162975822039154730666e-33,
  3.081487911019577365185e-33, 1.540743955509788682543e-33,
  7.703719777548943412553e-34, 3.851859888774471706221e-34,
  1.925929944387235853092e-34, 9.629649721936179265402e-35,
  4.814824860968089632681e-35, 2.407412430484044816333e-35,
  1.203706215242022408164e-35, 6.018531076210112040815e-36,
  3.009265538105056020405e-36, 1.504632769052528010202e-36,
  7.523163845262640051005e-37, 3.761581922631320025502e-37,
  1.880790961315660012751e-37, 9.403954806578300063752e-38,
  4.701977403289150031876e-38, 2.350988701644575015938e-38,
  1.175494350822287507969e-38, 5.877471754111437539844e-39,
  2.938735877055718769922e-39, 1.469367938527859384961e-39,
  7.346839692639296924805e-40, 3.673419846319648462402e-40,
  1.836709923159824231201e-40, 9.183549615799121156006e-41,
  4.591774807899560578003e-41, 2.295887403949780289001e-41,
  1.147943701974890144501e-41, 5.739718509874450722504e-42,
  2.869859254937225361252e-42, 1.434929627468612680626e-42,
  7.174648137343063403129e-43, 3.587324068671531701565e-43,
  1.793662034335765850782e-43, 8.968310171678829253912e-44,
  4.484155085839414626956e-44, 2.242077542919707313478e-44,
  1.121038771459853656739e-44, 5.605193857299268283695e-45,
  2.802596928649634141847e-45, 1.401298464324817070924e-45,
  7.006492321624085354619e-46, 3.503246160812042677309e-46,
  1.751623080406021338655e-46, 8.758115402030106693273e-47,
  4.379057701015053346637e-47, 2.189528850507526673318e-47,
  1.094764425253763336659e-47, 5.473822126268816683296e-48,
  2.736911063134408341648e-48, 1.368455531567204170824e-48,
  6.842277657836020854120e-49, 3.421138828918010427060e-49,
  1.710569414459005213530e-49, 8.552847072295026067650e-50,
  4.276423536147513033825e-50, 2.138211768073756516912e-50,
  1.069105884036878258456e-50, 5.345529420184391292281e-51,
  2.672764710092195646141e-51, 1.336382355046097823070e-51,
  6.681911775230489115351e-52, 3.340955887615244557676e-52,
  1.670477943807622278838e-52, 8.352389719038111394189e-53,
  4.176194859519055697095e-53, 2.088097429759527848547e-53,
  1.044048714879763924274e-53, 5.220243574398819621368e-54,
  2.610121787199409810684e-54, 1.305060893599704905342e-54,
  6.525304467998524526710e-55, 3.262652233999262263355e-55,
  1.631326116999631131678e-55, 8.156630584998155658388e-56,
  4.078315292499077829194e-56, 2.039157646249538914597e-56,
  1.019578823124769457298e-56, 5.097894115623847286492e-57,
  2.548947057811923643246e-57, 1.274473528905961821623e-57,
  6.372367644529809108116e-58, 3.186183822264904554058e-58,
  1.593091911132452277029e-58, 7.965459555662261385144e-59,
  3.982729777831130692572e-59, 1.991364888915565346286e-59,
  9.956824444577826731431e-60, 4.978412222288913365715e-60,
  2.489206111144456682858e-60, 1.244603055572228341429e-60,
  6.223015277861141707144e-61
];
// #endregion

/**
 * Calculates the Riemann Zeta function, zeta(s), for s >= 0, where s is an integer
 */
export function riemannZetaPosInt(s: number) {
  if (s < 0) return 0;
  if (s > CUTOFF) return 1;
  if (s > 1) return 1 + riemannZetaStarPosInt(s);
  if (s === 0) return -0.5;
  return Infinity;
}

/**
 * Calculate the Riemann Zeta Star function, zeta*(s), for s >= 0, where s is an integer
 */
export function riemannZetaStarPosInt(s: number) {
  if (s === 0) return -1.5;
  if (s === 1) return Infinity;
  let k = s - 2;
  if (k <= zetaStarK.length - 1) return zetaStarK[k]; // Pre-stored values for speed
  let diff = s - (zetaStarK.length - 1) - 2;
  return zetaStarK[zetaStarK.length - 1] / Math.pow(2, diff);
}

/**
 * Calculate the value of the Riemann Zeta function, zeta(s), where s is an integer
 */
export function riemannZetaInt(s: number) {
  if (s >= 0) return riemannZetaPosInt(s);
  let bn = bernoulliNumber(1 - s);
  return isFinite(bn) ? -bn / (1 - s) : -bn;
}

/**
 * Calculates the Riemann Zeta function for real s
 * 
 * Uses the relation eta(s) = (1 - 2^(1 - s)) * zeta(s)
 */
export function riemannZeta(s: number) {
  if (s === 1) return Infinity;
  return dirichletEta(s) / (1 - Math.pow(2, 1 - s));
}

/**
 * Calculates the Riemann Zeta Star function defined as zeta*(s) = zeta(s) - 1
 */
export function riemannZetaStar(s: number) {
  if (s === 1) return Infinity;
  let two_s = Math.pow(2, s - 1);
  let eta = dirichletEtaStar(s);
  if (s < 0) {
    two_s = 1 / two_s;
    return (eta + two_s) / (1 - two_s);
  }
  return (two_s * eta + 1) / (two_s - 1);
}